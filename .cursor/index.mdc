---
description: 実装とテストを常に同期するためのルール
alwaysApply: true
globs: ["src/**/*.ts", "tests/**/*.ts"]
---

# 実装とテストの同期ルール

## 基本原則
実装コード（src/**/*.ts）を修正する際は、必ず関連するテストコード（tests/**/*.ts）も確認・修正すること。

## 実装修正時の必須手順

### 1. テスト確認・追加
- 実装修正前に関連するテストファイルの存在確認
- テストが不足している場合は新規テストを追加
- 既存テストが実装変更に対応しているかチェック

### 2. 修正後の動作確認
- すべての修正完了後、`npm test` を実行する前提で動作確認
- テストカバレッジを下げないよう注意

## テスト失敗時の処理手順

### Step 1: 失敗分析
失敗したテスト内容を読み取り、実装側とテスト側のどちらが誤っているかを分析する

### Step 2: 修正方針説明
修正方針を簡潔に1行で説明する

### Step 3: diff形式での修正案提示
修正案を **diff 形式** で提示する（テスト側も実装側も必須）

各差分の直前に修正理由を以下の形式でコメント：
```
// Reason: [修正が必要な理由を1行で説明]
```

### Step 4: 再テスト確認
再度 `npm test` を実行して全テストがパスすることを確認する想定で完了とする

## 特別な考慮事項

### 実装とテストの乖離対応
- 実装とテストが乖離している場合は、仕様としてどちらが正しいかをまず判断
- 判断根拠を明示した上で適切な側を修正

### 小規模修正での注意点
- 小さな修正でも必ずテストコードに反映
- テストカバレッジを維持・向上させる

### 不明点への対応
- 不明点がある場合は、AIが勝手に省略せず「仮定」を明示
- 仮定に基づく修正案には必ず仮定内容をコメントで記載

## 出力フォーマット要件
- 変更提案は必ず **diff 形式のコードブロック** を使用
- すべてのdiffに `// Reason:` で始まる修正理由コメントを付与
- 実装側とテスト側の両方の修正案を提示