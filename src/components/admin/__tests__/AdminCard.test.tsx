/**
 * AdminCard „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆ„ÉÜ„Çπ„Éà
 * „Ç´„Éê„É¨„ÉÉ„Ç∏ÁõÆÊ®ô: 100%
 */

import React from 'react';
import { render, screen } from '@testing-library/react';
import AdminCard from '../AdminCard';

describe('AdminCard', () => {
  describe('Âü∫Êú¨Ê©üËÉΩ', () => {
    it('Âü∫Êú¨ÁöÑ„Å™„Ç´„Éº„Éâ„Åå„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã', () => {
      const { container } = render(
        <AdminCard>
          <div>„Ç´„Éº„Éâ„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const card = container.firstChild as HTMLElement;
      expect(card).toHaveClass('bg-white', 'rounded-lg', 'border', 'border-gray-200');
      expect(screen.getByText('„Ç´„Éº„Éâ„Ç≥„É≥„ÉÜ„É≥„ÉÑ')).toBeInTheDocument();
    });

    it('children„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <AdminCard>
          <p>„ÉÜ„Çπ„Éà„Ç≥„É≥„ÉÜ„É≥„ÉÑ</p>
          <button>„Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥</button>
        </AdminCard>
      );
      
      expect(screen.getByText('„ÉÜ„Çπ„Éà„Ç≥„É≥„ÉÜ„É≥„ÉÑ')).toBeInTheDocument();
      expect(screen.getByRole('button', { name: '„Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥' })).toBeInTheDocument();
    });
  });

  describe('title „Å® subtitle', () => {
    it('title„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <AdminCard title="„Ç´„Éº„Éâ„Çø„Ç§„Éà„É´">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const title = screen.getByRole('heading', { level: 3 });
      expect(title).toBeInTheDocument();
      expect(title).toHaveTextContent('„Ç´„Éº„Éâ„Çø„Ç§„Éà„É´');
      expect(title).toHaveClass('text-lg', 'font-semibold', 'text-gray-900');
    });

    it('subtitle„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <AdminCard title="„Çø„Ç§„Éà„É´" subtitle="„Çµ„Éñ„Çø„Ç§„Éà„É´">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const subtitle = screen.getByText('„Çµ„Éñ„Çø„Ç§„Éà„É´');
      expect(subtitle).toBeInTheDocument();
      expect(subtitle).toHaveClass('text-sm', 'text-gray-600', 'mt-1');
    });

    it('title„Å™„Åó„Åß„ÅØsubtitle„ÇÇË°®Á§∫„Åï„Çå„Å™„ÅÑ', () => {
      render(
        <AdminCard subtitle="„Çµ„Éñ„Çø„Ç§„Éà„É´">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      expect(screen.queryByText('„Çµ„Éñ„Çø„Ç§„Éà„É´')).not.toBeInTheDocument();
    });

    it('title„ÅÆ„Åø„Åßsubtitle„Å™„Åó„Åß„ÇÇÂãï‰Ωú„Åô„Çã', () => {
      render(
        <AdminCard title="„Çø„Ç§„Éà„É´„ÅÆ„Åø">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      expect(screen.getByText('„Çø„Ç§„Éà„É´„ÅÆ„Åø')).toBeInTheDocument();
      expect(screen.queryByText('text-sm text-gray-600 mt-1')).not.toBeInTheDocument();
    });
  });

  describe('icon', () => {
    it('icon„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <AdminCard title="„Ç¢„Ç§„Ç≥„É≥‰ªò„Åç„Ç´„Éº„Éâ" icon="üè†">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const icon = screen.getByText('üè†');
      expect(icon).toBeInTheDocument();
      expect(icon).toHaveClass('text-xl');
    });

    it('title„Å™„Åó„Åß„ÅØicon„ÇÇË°®Á§∫„Åï„Çå„Å™„ÅÑ', () => {
      render(
        <AdminCard icon="üè†">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      expect(screen.queryByText('üè†')).not.toBeInTheDocument();
    });

    it('icon„Å®title„ÄÅsubtitle„ÅåÁµÑ„ÅøÂêà„Çè„Åï„Çå„Çã', () => {
      render(
        <AdminCard title="ÂÆåÂÖ®„Å™„Éò„ÉÉ„ÉÄ„Éº" subtitle="Ë™¨ÊòéÊñá" icon="‚≠ê">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const icon = screen.getByText('‚≠ê');
      const title = screen.getByText('ÂÆåÂÖ®„Å™„Éò„ÉÉ„ÉÄ„Éº');
      const subtitle = screen.getByText('Ë™¨ÊòéÊñá');
      
      expect(icon).toBeInTheDocument();
      expect(title).toBeInTheDocument();
      expect(subtitle).toBeInTheDocument();
    });
  });

  describe('headerActions', () => {
    it('headerActions„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <AdminCard 
          title="„Ç¢„ÇØ„Ç∑„Éß„É≥‰ªò„Åç„Ç´„Éº„Éâ"
          headerActions={
            <button>Á∑®ÈõÜ</button>
          }
        >
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const editButton = screen.getByRole('button', { name: 'Á∑®ÈõÜ' });
      expect(editButton).toBeInTheDocument();
      
      const actionsContainer = editButton.closest('.flex.items-center.gap-2');
      expect(actionsContainer).toBeInTheDocument();
    });

    it('Ë§áÊï∞„ÅÆheaderActions„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <AdminCard 
          title="Ë§áÊï∞„Ç¢„ÇØ„Ç∑„Éß„É≥"
          headerActions={
            <>
              <button>Á∑®ÈõÜ</button>
              <button>ÂâäÈô§</button>
            </>
          }
        >
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      expect(screen.getByRole('button', { name: 'Á∑®ÈõÜ' })).toBeInTheDocument();
      expect(screen.getByRole('button', { name: 'ÂâäÈô§' })).toBeInTheDocument();
    });

    it('title„Å™„Åó„Åß„ÇÇheaderActions„ÅØË°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <AdminCard 
          headerActions={
            <button>„Ç¢„ÇØ„Ç∑„Éß„É≥</button>
          }
        >
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      expect(screen.getByRole('button', { name: '„Ç¢„ÇØ„Ç∑„Éß„É≥' })).toBeInTheDocument();
    });
  });

  describe('loadingÁä∂ÊÖã', () => {
    it('loading=false„Åß„ÅØÈÄöÂ∏∏„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <AdminCard loading={false}>
          <div>ÈÄöÂ∏∏„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      expect(screen.getByText('ÈÄöÂ∏∏„Ç≥„É≥„ÉÜ„É≥„ÉÑ')).toBeInTheDocument();
      expect(screen.queryByText('Ë™≠„ÅøËæº„Åø‰∏≠...')).not.toBeInTheDocument();
    });

    it('loading=true„Åß„É≠„Éº„Éá„Ç£„É≥„Ç∞„Çπ„Éî„Éä„Éº„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <AdminCard loading>
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const loadingText = screen.getByText('Ë™≠„ÅøËæº„Åø‰∏≠...');
      expect(loadingText).toBeInTheDocument();
      expect(loadingText).toHaveClass('ml-3', 'text-gray-600');
      
      const spinner = document.querySelector('.animate-spin');
      expect(spinner).toBeInTheDocument();
      expect(spinner).toHaveClass('rounded-full', 'h-8', 'w-8', 'border-b-2', 'border-blue-600');
      
      expect(screen.queryByText('„Ç≥„É≥„ÉÜ„É≥„ÉÑ')).not.toBeInTheDocument();
    });

    it('loading=true„ÅßÊòéÁ§∫ÁöÑ„Å´Ë®≠ÂÆö„Åï„Çå„Çã', () => {
      render(
        <AdminCard loading={true}>
          <div>ÈùûË°®Á§∫„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      expect(screen.getByText('Ë™≠„ÅøËæº„Åø‰∏≠...')).toBeInTheDocument();
      expect(screen.queryByText('ÈùûË°®Á§∫„Ç≥„É≥„ÉÜ„É≥„ÉÑ')).not.toBeInTheDocument();
    });
  });

  describe('errorÁä∂ÊÖã', () => {
    it('error„Åå„ÅÇ„ÇãÂ†¥Âêà„Ç®„É©„ÉºË°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <AdminCard error="„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const errorTitle = screen.getByText('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
      const errorMessage = screen.getByText('„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      const errorIcon = screen.getByText('‚ö†Ô∏è');
      
      expect(errorTitle).toBeInTheDocument();
      expect(errorTitle).toHaveClass('text-red-600', 'font-medium');
      expect(errorMessage).toBeInTheDocument();
      expect(errorMessage).toHaveClass('text-sm', 'text-gray-600', 'mt-1');
      expect(errorIcon).toBeInTheDocument();
      expect(errorIcon).toHaveClass('text-4xl', 'mb-2', 'block');
      
      expect(screen.queryByText('„Ç≥„É≥„ÉÜ„É≥„ÉÑ')).not.toBeInTheDocument();
    });

    it('loadingÁä∂ÊÖã„Ååerror„Çà„ÇäÂÑ™ÂÖà„Åï„Çå„Çã', () => {
      render(
        <AdminCard loading error="„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      expect(screen.getByText('Ë™≠„ÅøËæº„Åø‰∏≠...')).toBeInTheDocument();
      expect(screen.queryByText('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü')).not.toBeInTheDocument();
      expect(screen.queryByText('„Ç≥„É≥„ÉÜ„É≥„ÉÑ')).not.toBeInTheDocument();
    });
  });

  describe('padding prop', () => {
    it('„Éá„Éï„Ç©„É´„Éà„Åßmd padding„ÅåÈÅ©Áî®„Åï„Çå„Çã', () => {
      render(
        <AdminCard>
          <div data-testid="content">„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const content = screen.getByTestId('content');
      const contentContainer = content.parentElement;
      expect(contentContainer).toHaveClass('p-6');
    });

    it('padding="none"„Åß‰ΩôÁôΩ„Å™„Åó', () => {
      render(
        <AdminCard padding="none">
          <div data-testid="content">„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const content = screen.getByTestId('content');
      const contentContainer = content.parentElement;
      expect(contentContainer?.className).toBe('');
    });

    it('padding="sm"„ÅßÂ∞è„Åï„Å™‰ΩôÁôΩ', () => {
      render(
        <AdminCard padding="sm">
          <div data-testid="content">„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const content = screen.getByTestId('content');
      const contentContainer = content.parentElement;
      expect(contentContainer).toHaveClass('p-4');
    });

    it('padding="md"„Åß‰∏≠Á®ãÂ∫¶„ÅÆ‰ΩôÁôΩ', () => {
      render(
        <AdminCard padding="md">
          <div data-testid="content">„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const content = screen.getByTestId('content');
      const contentContainer = content.parentElement;
      expect(contentContainer).toHaveClass('p-6');
    });

    it('padding="lg"„ÅßÂ§ß„Åç„Å™‰ΩôÁôΩ', () => {
      render(
        <AdminCard padding="lg">
          <div data-testid="content">„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const content = screen.getByTestId('content');
      const contentContainer = content.parentElement;
      expect(contentContainer).toHaveClass('p-8');
    });

    it('‰∏çÊ≠£„Å™padding„Åßmd„ÅåÈÅ©Áî®„Åï„Çå„Çã', () => {
      render(
        <AdminCard padding={'xl' as any}>
          <div data-testid="content">„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const content = screen.getByTestId('content');
      const contentContainer = content.parentElement;
      expect(contentContainer).toHaveClass('p-6');
    });
  });

  describe('shadow prop', () => {
    it('„Éá„Éï„Ç©„É´„Éà„Åßmd shadow„ÅåÈÅ©Áî®„Åï„Çå„Çã', () => {
      const { container } = render(
        <AdminCard>
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const card = container.firstChild as HTMLElement;
      expect(card).toHaveClass('shadow-md');
    });

    it('shadow="none"„ÅßÂΩ±„Å™„Åó', () => {
      const { container } = render(
        <AdminCard shadow="none">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const card = container.firstChild as HTMLElement;
      expect(card).not.toHaveClass('shadow-sm', 'shadow-md', 'shadow-lg');
    });

    it('shadow="sm"„ÅßÂ∞è„Åï„Å™ÂΩ±', () => {
      const { container } = render(
        <AdminCard shadow="sm">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const card = container.firstChild as HTMLElement;
      expect(card).toHaveClass('shadow-sm');
    });

    it('shadow="md"„Åß‰∏≠Á®ãÂ∫¶„ÅÆÂΩ±', () => {
      const { container } = render(
        <AdminCard shadow="md">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const card = container.firstChild as HTMLElement;
      expect(card).toHaveClass('shadow-md');
    });

    it('shadow="lg"„ÅßÂ§ß„Åç„Å™ÂΩ±', () => {
      const { container } = render(
        <AdminCard shadow="lg">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const card = container.firstChild as HTMLElement;
      expect(card).toHaveClass('shadow-lg');
    });

    it('‰∏çÊ≠£„Å™shadow„Åßmd„ÅåÈÅ©Áî®„Åï„Çå„Çã', () => {
      const { container } = render(
        <AdminCard shadow={'xl' as any}>
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const card = container.firstChild as HTMLElement;
      expect(card).toHaveClass('shadow-md');
    });
  });

  describe('className prop', () => {
    it('„Ç´„Çπ„Çø„É†className„ÅåËøΩÂä†„Åï„Çå„Çã', () => {
      const { container } = render(
        <AdminCard className="custom-card">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const card = container.firstChild as HTMLElement;
      expect(card).toHaveClass('custom-card');
      expect(card).toHaveClass('bg-white', 'rounded-lg'); // Âü∫Êú¨„ÇØ„É©„Çπ„ÇÇÁ∂≠ÊåÅ
    });

    it('Ë§áÊï∞„ÅÆ„Ç´„Çπ„Çø„É†„ÇØ„É©„Çπ„ÅåËøΩÂä†„Åï„Çå„Çã', () => {
      const { container } = render(
        <AdminCard className="custom-1 custom-2">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const card = container.firstChild as HTMLElement;
      expect(card).toHaveClass('custom-1', 'custom-2');
    });

    it('Á©∫„ÅÆclassName„Åß„ÇÇÂãï‰Ωú„Åô„Çã', () => {
      const { container } = render(
        <AdminCard className="">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const card = container.firstChild as HTMLElement;
      expect(card).toHaveClass('bg-white'); // Âü∫Êú¨„ÇØ„É©„Çπ„ÅØÈÅ©Áî®„Åï„Çå„Çã
    });
  });

  describe('Ë§áÂêà„Éó„É≠„Éë„ÉÜ„Ç£„ÉÜ„Çπ„Éà', () => {
    it('„Åô„Åπ„Å¶„ÅÆ„Éó„É≠„Éë„ÉÜ„Ç£„ÅåÁµÑ„ÅøÂêà„Çè„Åï„Çå„Å¶Âãï‰Ωú„Åô„Çã', () => {
      const { container } = render(
        <AdminCard
          title="ÂÆåÂÖ®„Å™„Ç´„Éº„Éâ"
          subtitle="Ë©≥Á¥∞„Å™Ë™¨Êòé"
          icon="üéØ"
          headerActions={<button>„Ç¢„ÇØ„Ç∑„Éß„É≥</button>}
          padding="lg"
          shadow="lg"
          className="test-card"
        >
          <div>„É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      // „Ç´„Éº„ÉâÊú¨‰Ωì
      const card = container.firstChild as HTMLElement;
      expect(card).toHaveClass('bg-white', 'rounded-lg', 'shadow-lg', 'test-card');
      
      // „Éò„ÉÉ„ÉÄ„ÉºË¶ÅÁ¥†
      expect(screen.getByText('üéØ')).toBeInTheDocument();
      expect(screen.getByText('ÂÆåÂÖ®„Å™„Ç´„Éº„Éâ')).toBeInTheDocument();
      expect(screen.getByText('Ë©≥Á¥∞„Å™Ë™¨Êòé')).toBeInTheDocument();
      expect(screen.getByRole('button', { name: '„Ç¢„ÇØ„Ç∑„Éß„É≥' })).toBeInTheDocument();
      
      // „Ç≥„É≥„ÉÜ„É≥„ÉÑ
      const content = screen.getByText('„É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ');
      expect(content).toBeInTheDocument();
      expect(content.parentElement).toHaveClass('p-8'); // lg padding
    });

    it('loadingÁä∂ÊÖã„Åß„ÅØ‰ªñ„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅåË°®Á§∫„Åï„Çå„Å™„ÅÑ', () => {
      render(
        <AdminCard
          title="„É≠„Éº„Éá„Ç£„É≥„Ç∞„Ç´„Éº„Éâ"
          loading
          error="„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏"
        >
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      // „Çø„Ç§„Éà„É´„ÅØË°®Á§∫„Åï„Çå„ÇãÔºà„Éò„ÉÉ„ÉÄ„ÉºÈÉ®ÂàÜÔºâ
      expect(screen.getByText('„É≠„Éº„Éá„Ç£„É≥„Ç∞„Ç´„Éº„Éâ')).toBeInTheDocument();
      
      // „É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫
      expect(screen.getByText('Ë™≠„ÅøËæº„Åø‰∏≠...')).toBeInTheDocument();
      
      // „Ç®„É©„Éº„Å®„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅØË°®Á§∫„Åï„Çå„Å™„ÅÑ
      expect(screen.queryByText('„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏')).not.toBeInTheDocument();
      expect(screen.queryByText('„Ç≥„É≥„ÉÜ„É≥„ÉÑ')).not.toBeInTheDocument();
    });
  });

  describe('„É¨„Ç§„Ç¢„Ç¶„ÉàÊßãÈÄ†', () => {
    it('„Éò„ÉÉ„ÉÄ„Éº„ÅÇ„Çä„ÅÆÂ†¥Âêà„ÅÆÊßãÈÄ†„ÅåÊ≠£„Åó„ÅÑ', () => {
      render(
        <AdminCard title="ÊßãÈÄ†„ÉÜ„Çπ„Éà">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      // „Éò„ÉÉ„ÉÄ„Éº„ÅÆ„Éú„Éº„ÉÄ„Éº
      const headerContainer = screen.getByText('ÊßãÈÄ†„ÉÜ„Çπ„Éà').closest('.border-b.border-gray-200');
      expect(headerContainer).toBeInTheDocument();
      expect(headerContainer).toHaveClass('p-6', 'pb-4');
    });

    it('headerActions„ÅÆ„Åø„ÅÆÂ†¥Âêà„ÅÆÊßãÈÄ†', () => {
      render(
        <AdminCard headerActions={<button>„Ç¢„ÇØ„Ç∑„Éß„É≥</button>}>
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      const actionButton = screen.getByRole('button');
      const headerContainer = actionButton.closest('.border-b.border-gray-200');
      expect(headerContainer).toHaveClass('p-4'); // title„Åå„Å™„ÅÑÂ†¥Âêà„ÅÆpadding
    });
  });

  describe('„Ç®„ÉÉ„Ç∏„Ç±„Éº„Çπ', () => {
    it('children „Åå null „Åß„ÇÇÂãï‰Ωú„Åô„Çã', () => {
      render(<AdminCard>{null}</AdminCard>);
      
      const card = document.querySelector('.bg-white');
      expect(card).toBeInTheDocument();
    });

    it('children „ÅåË§áÊï∞Ë¶ÅÁ¥†„Åß„ÇÇÂãï‰Ωú„Åô„Çã', () => {
      render(
        <AdminCard>
          <h2>Ë¶ãÂá∫„Åó</h2>
          <p>ÊÆµËêΩ1</p>
          <p>ÊÆµËêΩ2</p>
          <button>„Éú„Çø„É≥</button>
        </AdminCard>
      );
      
      expect(screen.getByRole('heading', { level: 2 })).toBeInTheDocument();
      expect(screen.getByText('ÊÆµËêΩ1')).toBeInTheDocument();
      expect(screen.getByText('ÊÆµËêΩ2')).toBeInTheDocument();
      expect(screen.getByRole('button', { name: '„Éú„Çø„É≥' })).toBeInTheDocument();
    });

    it('Á©∫ÊñáÂ≠ó„ÅÆerror„Åß„ÅØ„Ç®„É©„ÉºË°®Á§∫„Åï„Çå„Å™„ÅÑ', () => {
      render(
        <AdminCard error="">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      // Á©∫ÊñáÂ≠ó„ÅÆerror„ÅØ falsy „Å™„ÅÆ„ÅßÈÄöÂ∏∏„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅåË°®Á§∫„Åï„Çå„Çã
      expect(screen.getByText('„Ç≥„É≥„ÉÜ„É≥„ÉÑ')).toBeInTheDocument();
      expect(screen.queryByText('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü')).not.toBeInTheDocument();
    });

    it('ÁâπÊÆäÊñáÂ≠ó„ÇíÂê´„ÇÄtitle„Åß„ÇÇÂãï‰Ωú„Åô„Çã', () => {
      render(
        <AdminCard title="ÁâπÊÆäÊñáÂ≠ó @#$%^&*()_+ „ÉÜ„Çπ„Éà">
          <div>„Ç≥„É≥„ÉÜ„É≥„ÉÑ</div>
        </AdminCard>
      );
      
      expect(screen.getByText('ÁâπÊÆäÊñáÂ≠ó @#$%^&*()_+ „ÉÜ„Çπ„Éà')).toBeInTheDocument();
    });
  });
});